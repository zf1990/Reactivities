[{"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\index.tsx":"1","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\demo.ts":"3","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\CarItem.tsx":"4","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"5","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\nav\\NavBar.tsx":"6","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"7","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"8","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"9","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"10","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"11","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"12","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"13","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx":"14","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx":"15","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx":"16","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx":"17","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx":"18","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx":"19","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx":"20","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\errors\\TestError.tsx":"21","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\errors\\Notfound.tsx":"22","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\errors\\ValidationErrors.tsx":"23","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\app\\stores\\store.ts":"24","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\errors\\ServerError.tsx":"25","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts":"26"},{"size":823,"mtime":1614556549851,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":499162500000,"results":"29","hashOfConfig":"28"},{"size":365,"mtime":1609181003172,"results":"30","hashOfConfig":"28"},{"size":264,"mtime":1609182050371,"results":"31","hashOfConfig":"28"},{"size":2104,"mtime":1616342024595,"results":"32","hashOfConfig":"28"},{"size":1075,"mtime":1614226138562,"results":"33","hashOfConfig":"28"},{"size":796,"mtime":1615754718870,"results":"34","hashOfConfig":"28"},{"size":954,"mtime":1615754830102,"results":"35","hashOfConfig":"28"},{"size":1530,"mtime":1615754892891,"results":"36","hashOfConfig":"28"},{"size":3833,"mtime":1615760736728,"results":"37","hashOfConfig":"28"},{"size":2340,"mtime":1616342862684,"results":"38","hashOfConfig":"28"},{"size":362,"mtime":1610395229211,"results":"39","hashOfConfig":"28"},{"size":4501,"mtime":1615754385377,"results":"40","hashOfConfig":"28"},{"size":795,"mtime":1611546407025,"results":"41","hashOfConfig":"28"},{"size":293,"mtime":1610599163115,"results":"42","hashOfConfig":"28"},{"size":1209,"mtime":1611546229045,"results":"43","hashOfConfig":"28"},{"size":1645,"mtime":1613323241440,"results":"44","hashOfConfig":"28"},{"size":1410,"mtime":1611545415664,"results":"45","hashOfConfig":"28"},{"size":1909,"mtime":1611545892566,"results":"46","hashOfConfig":"28"},{"size":1862,"mtime":1611545832669,"results":"47","hashOfConfig":"28"},{"size":2200,"mtime":1614557141044,"results":"48","hashOfConfig":"28"},{"size":551,"mtime":1614454612083,"results":"49","hashOfConfig":"28"},{"size":469,"mtime":1614562255369,"results":"50","hashOfConfig":"28"},{"size":463,"mtime":1616342057482,"results":"51","hashOfConfig":"28"},{"size":704,"mtime":1616341885180,"results":"52","hashOfConfig":"28"},{"size":312,"mtime":1616341505908,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"t6fbqs",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\index.tsx",[],["112","113"],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\demo.ts",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\CarItem.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\nav\\NavBar.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",["114"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n  const { activityStore } = useStore();\r\n\r\n  useEffect(() => {\r\n    activityStore.loadActivities();\r\n  }, [activityStore]);\r\n\r\n  if (activityStore.loadingInitial)\r\n    return <LoadingComponent content=\"Loading activities...\" />;\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <ActivityList />\r\n      </Grid.Column>\r\n      <h2>Activity Filters</h2>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDashboard);\r\n","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",["115","116"],"import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment, useContext } from \"react\";\r\nimport { Item, Label } from \"semantic-ui-react\";\r\nimport ActivityStore from \"../../../app/stores/activityStore\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { ActivityListItem } from \"./ActivityListItem\";\r\n\r\nconst ActivityList: React.FC = () => {\r\n  const { activityStore } = useStore();\r\n  const { activitiesByDate } = activityStore;\r\n\r\n  return (\r\n    <Fragment>\r\n      {activitiesByDate.map(([group, activities]) => (\r\n        <Fragment key={group}>\r\n          <Label size=\"large\" color=\"blue\">\r\n            {group}\r\n          </Label>\r\n\r\n          <Item.Group divided>\r\n            {activities.map((activity) => (\r\n              <ActivityListItem key={activity.id} activity={activity} />\r\n            ))}\r\n          </Item.Group>\r\n        </Fragment>\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityList);\r\n","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",["117","118"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport ActivityStore from \"../../../app/stores/activityStore\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\ninterface IDetailParams {\r\n  id: string;\r\n}\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<IDetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const { activityStore } = useStore();\r\n  const { activity, loadActivity, loadingInitial } = activityStore;\r\n\r\n  useEffect(() => {\r\n    loadActivity(match.params.id);\r\n  }, [loadActivity, match.params.id, history]);\r\n\r\n  if (loadingInitial) return <LoadingComponent content=\"Loading activity\" />;\r\n\r\n  if (!activity) return <h2>Activity not found</h2>;\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <ActivityDetailedHeader activity={activity} />\r\n        <ActivityDetailedInfo activity={activity} />\r\n        <ActivityDetailedChat />\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n        <ActivityDetailedSidebar />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetails);\r\n","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",["119","120"],"import React, { FormEvent, useContext, useEffect, useState } from \"react\";\r\nimport { Button, Form, Grid, Segment } from \"semantic-ui-react\";\r\nimport { IActivity } from \"../../../app/models/activity\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport ActivityStore from \"../../../app/stores/activityStore\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const { activityStore } = useStore();\r\n  const {\r\n    createActivity,\r\n    editActivity,\r\n    submitting,\r\n    activity: initialFormState,\r\n    loadActivity,\r\n    clearActivity,\r\n  } = activityStore;\r\n\r\n  const [activity, setActivity] = useState<IActivity>({\r\n    id: \"\",\r\n    title: \"\",\r\n    category: \"\",\r\n    description: \"\",\r\n    date: \"\",\r\n    city: \"\",\r\n    venue: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (match.params.id && activity.id.length === 0) {\r\n      loadActivity(match.params.id).then(\r\n        () => initialFormState && setActivity(initialFormState)\r\n      );\r\n    }\r\n\r\n    return () => {\r\n      clearActivity();\r\n    };\r\n  }, [\r\n    loadActivity,\r\n    clearActivity,\r\n    match.params.id,\r\n    initialFormState,\r\n    activity.id.length,\r\n  ]);\r\n\r\n  const handleSubmit = () => {\r\n    if (activity.id.length === 0) {\r\n      let newActivity = {\r\n        ...activity,\r\n        id: uuid(),\r\n      };\r\n      createActivity(newActivity).then(() =>\r\n        history.push(`/activities/${newActivity.id}`)\r\n      );\r\n    } else {\r\n      editActivity(activity).then(() =>\r\n        history.push(`/activities/${activity.id}`)\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (\r\n    event: FormEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const { name, value } = event.currentTarget;\r\n    setActivity({ ...activity, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <Segment clearing>\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Input\r\n              placeholder=\"Title\"\r\n              value={activity.title}\r\n              name=\"title\"\r\n              onChange={handleInputChange}\r\n            />\r\n            <Form.TextArea\r\n              rows={2}\r\n              placeholder=\"Description\"\r\n              name=\"description\"\r\n              value={activity.description}\r\n              onChange={handleInputChange}\r\n            />\r\n            <Form.Input\r\n              placeholder=\"Category\"\r\n              name=\"category\"\r\n              value={activity.category}\r\n              onChange={handleInputChange}\r\n            />\r\n            <Form.Input\r\n              type=\"datetime-local\"\r\n              placeholder=\"Date\"\r\n              name=\"date\"\r\n              value={activity.date}\r\n              onChange={handleInputChange}\r\n            />\r\n            <Form.Input\r\n              placeholder=\"City\"\r\n              name=\"city\"\r\n              value={activity.city}\r\n              onChange={handleInputChange}\r\n            />\r\n            <Form.Input\r\n              placeholder=\"Venue\"\r\n              name=\"venue\"\r\n              value={activity.venue}\r\n              onChange={handleInputChange}\r\n            />\r\n            <Button\r\n              floated=\"right\"\r\n              positive\r\n              type=\"submit\"\r\n              content=\"Submit\"\r\n              loading={submitting}\r\n            />\r\n            <Button\r\n              floated=\"right\"\r\n              standard\r\n              type=\"button\"\r\n              content=\"Cancel\"\r\n              onClick={() => history.push(\"/activities\")}\r\n            />\r\n          </Form>\r\n        </Segment>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityForm);\r\n","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\app\\api\\agent.ts",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",["121"],"import {\r\n  observable,\r\n  action,\r\n  computed,\r\n  configure,\r\n  runInAction,\r\n  makeObservable,\r\n} from \"mobx\";\r\nimport { createContext, SyntheticEvent } from \"react\";\r\nimport agent from \"../api/agent\";\r\nimport { IActivity } from \"../models/activity\";\r\n\r\nconfigure({ enforceActions: \"always\" });\r\n\r\nexport default class ActivityStore {\r\n  activityRegistry = new Map();\r\n  activities: IActivity[] = [];\r\n  loadingInitial = false;\r\n  activity: IActivity | null = null;\r\n  submitting = false;\r\n  target = \"\";\r\n\r\n  constructor() {\r\n    //makeAutoObservable(this);\r\n    makeObservable(this, {\r\n      activityRegistry: observable,\r\n      activities: observable,\r\n      loadingInitial: observable,\r\n      activity: observable,\r\n      submitting: observable,\r\n      target: observable,\r\n      activitiesByDate: computed,\r\n      loadActivities: action,\r\n      deleteActivity: action,\r\n      loadActivity: action,\r\n      createActivity: action,\r\n      clearActivity: action,\r\n      editActivity: action,\r\n    });\r\n  }\r\n\r\n  get activitiesByDate() {\r\n    return this.groupActivitiesByDate(\r\n      Array.from(this.activityRegistry.values())\r\n    );\r\n  }\r\n\r\n  groupActivitiesByDate(activities: IActivity[]) {\r\n    const sortedActivities = activities.sort(\r\n      (a, b) => Date.parse(a.date) - Date.parse(b.date)\r\n    );\r\n\r\n    return Object.entries(\r\n      sortedActivities.reduce((activities, activity) => {\r\n        const date = activity.date.split(\"T\")[0];\r\n        activities[date] = activities[date]\r\n          ? [...activities[date], activity]\r\n          : [activity]; //if activities[date] exist, previous activities + current activity, othersie, just be activity/  return the activities\r\n        return activities;\r\n      }, {} as { [key: string]: IActivity[] })\r\n    );\r\n  }\r\n\r\n  loadActivities = async () => {\r\n    this.loadingInitial = true;\r\n    try {\r\n      const activities = await agent.Activities.list();\r\n      runInAction(() => {\r\n        activities.forEach((a: IActivity) => {\r\n          a.date = a.date.split(\".\")[0];\r\n          this.activityRegistry.set(a.id, a);\r\n        });\r\n      });\r\n    } catch (err) {\r\n      runInAction(() => {\r\n        this.loadingInitial = false;\r\n      });\r\n    } finally {\r\n      runInAction(() => (this.loadingInitial = false));\r\n    }\r\n  };\r\n\r\n  deleteActivity = async (\r\n    event: SyntheticEvent<HTMLButtonElement>,\r\n    id: string\r\n  ) => {\r\n    this.submitting = true;\r\n    this.target = event.currentTarget.name;\r\n    try {\r\n      await agent.Activities.delete(id);\r\n      runInAction(() => {\r\n        this.activityRegistry.delete(id);\r\n        this.submitting = false;\r\n        this.target = \"\";\r\n      });\r\n    } catch (err) {\r\n      runInAction(() => {\r\n        this.submitting = false;\r\n        this.target = \"\";\r\n      });\r\n\r\n      console.log(\"Oh fuck, something went wrong.\" + err);\r\n    }\r\n  };\r\n\r\n  loadActivity = async (id: string) => {\r\n    let activity = this.getActivity(id);\r\n    if (activity) {\r\n      this.activity = activity;\r\n    } else {\r\n      this.loadingInitial = true;\r\n      try {\r\n        activity = await agent.Activities.details(id);\r\n        runInAction(() => {\r\n          this.activity = activity;\r\n          this.loadingInitial = false;\r\n        });\r\n      } catch (err) {\r\n        console.log(\r\n          \"Oh fuck, something went wrong with fetching this activity...\" + err\r\n        );\r\n        runInAction(() => (this.loadingInitial = false));\r\n      }\r\n    }\r\n  };\r\n\r\n  getActivity = (id: string) => {\r\n    return this.activityRegistry.get(id);\r\n  };\r\n\r\n  createActivity = async (activity: IActivity) => {\r\n    this.submitting = true;\r\n    try {\r\n      await agent.Activities.create(activity);\r\n      runInAction(() => {\r\n        this.activityRegistry.set(activity.id, activity);\r\n        this.activity = activity;\r\n        this.submitting = false;\r\n      });\r\n    } catch (err) {\r\n      runInAction(() => (this.submitting = false));\r\n      console.log(\"Oh fuck, something went wrong.\" + err);\r\n    }\r\n  };\r\n\r\n  clearActivity = () => {\r\n    this.activity = null;\r\n  };\r\n\r\n  editActivity = async (activity: IActivity) => {\r\n    this.submitting = true;\r\n    try {\r\n      await agent.Activities.update(activity);\r\n      runInAction(() => {\r\n        this.activityRegistry.set(activity.id, activity);\r\n        this.activity = activity;\r\n        this.submitting = false;\r\n      });\r\n    } catch (err) {\r\n      runInAction(() => (this.submitting = false));\r\n    }\r\n  };\r\n}\r\n\r\n//export default createContext(new ActivityStore());\r\n","C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\errors\\TestError.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\errors\\Notfound.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\errors\\ValidationErrors.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\app\\stores\\store.ts",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\features\\errors\\ServerError.tsx",[],"C:\\Users\\zhouf\\source\\repos\\SocialMediaApp\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":27},{"ruleId":"126","severity":1,"message":"127","line":2,"column":27,"nodeType":"128","messageId":"129","endLine":2,"endColumn":37},{"ruleId":"126","severity":1,"message":"130","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":21},{"ruleId":"126","severity":1,"message":"127","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":27},{"ruleId":"126","severity":1,"message":"130","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":21},{"ruleId":"126","severity":1,"message":"127","line":1,"column":28,"nodeType":"128","messageId":"129","endLine":1,"endColumn":38},{"ruleId":"126","severity":1,"message":"130","line":5,"column":8,"nodeType":"128","messageId":"129","endLine":5,"endColumn":21},{"ruleId":"126","severity":1,"message":"131","line":9,"column":10,"nodeType":"128","messageId":"129","endLine":9,"endColumn":23},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"@typescript-eslint/no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'ActivityStore' is defined but never used.","'createContext' is defined but never used.","no-global-assign","no-unsafe-negation"]